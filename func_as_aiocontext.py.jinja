import contextlib
from typing import Any, AsyncGenerator


class A:
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        pass

    def close(self) -> None:
        pass


@contextlib.asynccontextmanager
async def {{ name }}(*args: Any, **kwargs: Any) -> AsyncGenerator[A, Any]:
    resource = A(*args, **kwargs)
    try:
        yield resource
    finally:
        # Code to release resource, e.g.:
        await resource.close()
